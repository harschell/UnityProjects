//------------------------------------------------------------------------------
// <auto-generated>
//     Il codice Ã¨ stato generato da uno strumento.
//     Versione runtime:4.0.30319.18051
//
//     Le modifiche apportate a questo file possono provocare un comportamento non corretto e andranno perse se
//     il codice viene rigenerato.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System.Collections;

[AddComponentMenu("Collision Deactivator")]
public class CollisionDeactivator : MonoBehaviour
{
	public GameObject[] player = new GameObject[]{null,null};

	public enum TriggerType
	{
		OnSameColor,
		OnDisjointColor
	};
	public TriggerType triggerType;

	void Update ()
	{
		Color light_color = new Color(0,0,0,0);
		for (int i=0; i<player.Length; i++)
		{
			Light l = player[i].transform.FindChild("PlayerLight"+(i+1)).gameObject.light;
			float light_range = l.range;
			if (l.enabled && l.intensity!=0 && Vector3.Distance (player[i].transform.position, transform.position) < light_range/2.0f)
			{
				light_color += l.color;
			}
		}

		Color my_color;
		my_color = transform.FindChild ("Graphics").gameObject.GetComponent<Renderer> ().material.color;

		switch (triggerType)
		{
			case TriggerType.OnSameColor:
			if (my_color.r == light_color.r &&
			    my_color.g == light_color.g &&
			    my_color.b == light_color.b
			    )
				{
					transform.FindChild("Graphics").gameObject.GetComponent<BoxCollider>().enabled = false;
				}else
				{
					transform.FindChild("Graphics").gameObject.GetComponent<BoxCollider>().enabled = true;
				}
				break;
			case TriggerType.OnDisjointColor:
				if (
					light_color != new Color(0,0,0,0) &&
					(my_color.r+light_color.r == my_color.r || my_color.r+light_color.r == light_color.r) &&
					(my_color.g+light_color.g == my_color.g || my_color.g+light_color.g == light_color.g) &&
					(my_color.b+light_color.b == my_color.b || my_color.b+light_color.b == light_color.b))
				{
					transform.FindChild("Graphics").gameObject.GetComponent<BoxCollider>().enabled = false;
				}else
				{
					transform.FindChild("Graphics").gameObject.GetComponent<BoxCollider>().enabled = true;
				}
				break;
		}
	}

	void Start()
	{
		player = new GameObject[]{GameObject.Find("Player1"),GameObject.Find("Player2")};
		transform.FindChild("Graphics").gameObject.GetComponent<BoxCollider>().enabled = true;
	}
}
